<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Consort POR Calculator</title>
    <style>
        /* Base styles */
        body {
            font-family: Arial, sans-serif;
            background-color: #f8f9fa;
            color: #333;
            margin: 0;
            padding: 20px;
        }

        .button-container {
            display: flex;
            justify-content: center;
            flex-wrap: wrap;
            gap: 15px;
            margin-top: 20px;
            margin-bottom: 20px;
        }

        .btn,
        .export-btn,
        .reset-btn,
        .comparison-btn {
            padding: 10px 20px;
            background-color: #FF4E59;
            color: #fff;
            border: none;
            border-radius: 5px;
            font-size: 14px;
            cursor: pointer;
            box-sizing: border-box;
            transition: background-color 0.3s ease;
            flex: 1;
            max-width: 200px;
            text-align: center;
        }

        .btn:hover,
        .export-btn:hover,
        .reset-btn:hover,
        .comparison-btn:hover {
            background-color: #cc3e47;
        }

        .export-btn {
            background-color: #4CAF50;
        }

        .export-btn:hover {
            background-color: #45a049;
        }

        .reset-btn {
            background-color: #617B8F;
        }

        .reset-btn:hover {
            background-color: #4b6173;
        }

        .comparison-btn {
            background-color: #FF8C00;
        }

        .comparison-btn:hover {
            background-color: #e67e00;
        }

        .container {
            display: flex;
            flex-wrap: wrap;
            gap: 20px;
            justify-content: center;
            margin-top: 20px;
        }

        .card {
            width: 280px;
            padding: 20px;
            background-color: #ffffff;
            border-radius: 10px;
            box-shadow: 0 6px 14px rgba(0, 0, 0, 0.15);
            position: relative;
            transition: transform 0.3s ease;
        }

        .card:hover {
            transform: translateY(-5px);
        }

        .card-header {
            display: flex;
            align-items: center;
            margin-bottom: 15px;
        }

        .product-name-input {
            flex: 1;
            padding: 8px;
            border-radius: 5px;
            border: 1px solid #ddd;
            font-size: 1.1em;
            text-align: center;
            color: #274358;
        }

        .remove-btn {
            background-color: #FF4E59;
            color: white;
            border: none;
            font-size: 14px;
            padding: 8px 12px;
            border-radius: 5px;
            cursor: pointer;
            margin-left: 10px;
        }

        .form-group {
            margin-bottom: 15px;
        }

        .form-group label {
            font-weight: bold;
            display: block;
            margin-bottom: 5px;
        }

        .form-group input,
        .form-group select,
        .form-group textarea {
            width: 100%;
            padding: 8px;
            border-radius: 5px;
            border: 1px solid #ddd;
        }

        .clear-btn,
        .copy-btn-bottom {
            font-size: 14px;
            padding: 10px;
            border-radius: 5px;
            cursor: pointer;
            margin-top: 10px;
            background-color: #617B8F;
            color: white;
            width: 100%;
            border: none;
            transition: background-color 0.3s ease;
        }

        .clear-btn:hover,
        .copy-btn-bottom:hover {
            background-color: #4b6173;
        }

        .copy-btn-bottom {
            background-color: #4CAF50;
        }

        .copy-btn-bottom:hover {
            background-color: #45a049;
        }

        .toggle-group {
            display: flex;
            justify-content: space-around;
            margin-top: 10px;
        }

        .toggle-btn {
            width: 45%;
            padding: 8px;
            color: #fff;
            border: none;
            border-radius: 5px;
            font-size: 14px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

        .toggle-yes {
            background-color: #4CAF50; /* Green for 'Yes' */
        }

        .toggle-no {
            background-color: #FF4E59; /* Red for 'No' */
        }

        .summary-table {
            width: 90%;
            margin: 20px auto;
            border-collapse: collapse;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

        .summary-table th,
        .summary-table td {
            border: 1px solid #ddd;
            padding: 10px;
            text-align: center;
        }

        .summary-table th {
            background-color: #274358;
            color: #ffffff;
        }

        .summary-table tfoot td {
            font-weight: bold;
            background-color: #A6D9D7;
        }

        .chart-container {
            width: 90%;
            margin: 20px auto;
            display: flex;
            flex-wrap: wrap;
            gap: 20px;
            justify-content: center;
        }

        .chart-card {
            background-color: #ffffff;
            border-radius: 10px;
            box-shadow: 0 6px 14px rgba(0, 0, 0, 0.1);
            padding: 20px;
            width: 45%;
            position: relative;
        }

        canvas {
            width: 100% !important;
            height: auto !important;
        }

        /* Ensure the charts are responsive on smaller screens */
        @media (max-width: 768px) {
            .chart-card {
                width: 100%;
            }
        }

        /* Tooltip styles */
        .tooltip {
            position: relative;
            display: inline-block;
            cursor: help;
        }

        .tooltip .tooltiptext {
            visibility: hidden;
            width: 200px;
            background-color: #274358;
            color: #fff;
            text-align: left;
            border-radius: 6px;
            padding: 8px;
            position: absolute;
            z-index: 1;
            bottom: 125%; /* Position above the icon */
            left: 50%;
            margin-left: -100px;
            opacity: 0;
            transition: opacity 0.3s;
            font-size: 12px;
        }

        .tooltip:hover .tooltiptext {
            visibility: visible;
            opacity: 1;
        }

        /* Style for comparison modal */
        .modal {
            display: none;
            position: fixed;
            z-index: 999;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0,0,0,0.5);
        }

        .modal-content {
            background-color: #fefefe;
            margin: 5% auto;
            padding: 20px;
            border-radius: 10px;
            width: 80%;
            max-width: 600px;
        }

        .close-modal {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
        }

        .compare-select {
            width: 100%;
            margin-bottom: 20px;
            padding: 8px;
            border-radius: 5px;
            border: 1px solid #ddd;
        }

        .compare-table {
            width: 100%;
            border-collapse: collapse;
        }

        .compare-table th,
        .compare-table td {
            border: 1px solid #ddd;
            padding: 10px;
            text-align: center;
        }

        .export-chart-btn {
            position: absolute;
            top: 10px;
            right: 10px;
            padding: 5px;
            background-color: #617B8F;
            color: white;
            border: none;
            border-radius: 5px;
            font-size: 12px;
            cursor: pointer;
        }

        .export-chart-btn:hover {
            background-color: #4b6173;
        }
    </style>
</head>
<body>

    <div class="button-container">
        <button class="btn" onclick="addProductCard()">Add Product</button>
        <button class="export-btn" onclick="exportToCSV()">Export Summary to CSV</button>
        <button class="reset-btn" onclick="resetAll()">Reset All</button>
        <button class="comparison-btn" onclick="openComparisonModal()">Comparison Mode</button>
    </div>

    <div class="container" id="productContainer"></div>

    <table class="summary-table" id="summaryTable">
        <thead>
            <tr>
                <th>Product</th>
                <th>Wholesale (£)</th>
                <th>RRP (£)</th>
                <th>Discount (%)</th>
                <th>Pack Size</th>
                <th>Total Units</th>
                <th>Total Revenue (£)</th>
                <th>Profit per Item (£)</th>
                <th>Total Profit (£)</th>
                <th>POR (%)</th>
            </tr>
        </thead>
        <tbody id="summaryBody"></tbody>
        <tfoot>
            <tr>
                <td colspan="5">Totals:</td>
                <td id="totalUnits">0</td>
                <td id="totalRevenue">£0.00</td>
                <td></td>
                <td id="totalProfit">£0.00</td>
                <td id="averagePOR">0.00%</td>
            </tr>
        </tfoot>
    </table>

    <div class="chart-container">
        <div class="chart-card">
            <h3>Profit by Product</h3>
            <canvas id="profitChart"></canvas>
            <button class="export-chart-btn" onclick="exportChart('profitChart', 'profit_chart.png')">Export Chart</button>
        </div>
        <div class="chart-card">
            <h3>POR by Product</h3>
            <canvas id="porChart"></canvas>
            <button class="export-chart-btn" onclick="exportChart('porChart', 'por_chart.png')">Export Chart</button>
        </div>
    </div>

    <!-- Comparison Modal -->
    <div id="comparisonModal" class="modal">
        <div class="modal-content">
            <span class="close-modal" onclick="closeComparisonModal()">&times;</span>
            <h2>Comparison Mode</h2>
            <div class="form-group">
                <label for="compareProduct1">Select Product 1:</label>
                <select id="compareProduct1" class="compare-select"></select>
            </div>
            <div class="form-group">
                <label for="compareProduct2">Select Product 2:</label>
                <select id="compareProduct2" class="compare-select"></select>
            </div>
            <table class="compare-table">
                <thead>
                    <tr>
                        <th>Attribute</th>
                        <th>Product 1</th>
                        <th>Product 2</th>
                    </tr>
                </thead>
                <tbody id="comparisonBody"></tbody>
            </table>
        </div>
    </div>

    <!-- Include Chart.js and plugin for data labels -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@2"></script>

    <!-- Include html2canvas for exporting charts -->
    <script src="https://cdn.jsdelivr.net/npm/html2canvas@1.4.1/dist/html2canvas.min.js"></script>

    <script>
        // Register the DataLabels plugin
        Chart.register(ChartDataLabels);

        let uniqueIdCounter = 0; // Unique ID for each product card
        let productData = []; // Array to store product data
        let productNamesList = []; // For autocomplete

        function addProductCard(data = null) {
            const productId = uniqueIdCounter++;
            const product = {
                id: productId,
                name: data ? data.name : '', // Will set later
                profit: data ? data.profit : 0,
                por: data ? data.por : 0,
                revenue: data ? data.revenue : 0
            };
            productData.push(product);

            const card = document.createElement('div');
            card.className = 'card';
            card.id = `productCard${productId}`;
            card.innerHTML = `
                <div class="card-header">
                    <input list="productNames" type="text" id="productName${productId}" class="product-name-input" placeholder="Product ${productData.length}" oninput="updateProductName(${productId})">
                    <datalist id="productNames">
                        ${productNamesList.map(name => `<option value="${name}">`).join('')}
                    </datalist>
                    <button class="remove-btn" onclick="removeProductCard(${productId})">X</button>
                </div>
                <div class="form-group">
                    <label for="wholesale${productId}">Wholesale (£)
                        <span class="tooltip">ℹ️
                            <span class="tooltiptext">Enter the total wholesale price for all units in the pack.</span>
                        </span>
                    </label>
                    <input type="number" id="wholesale${productId}" step="0.01" oninput="calculatePOR(${productId})">
                </div>
                <div class="form-group">
                    <label for="rrp${productId}">RRP (£)
                        <span class="tooltip">ℹ️
                            <span class="tooltiptext">Enter the recommended retail price per unit.</span>
                        </span>
                    </label>
                    <input type="number" id="rrp${productId}" step="0.01" oninput="calculatePOR(${productId})">
                </div>
                <div class="form-group">
                    <label for="discount${productId}">Discount (%)
                        <span class="tooltip">ℹ️
                            <span class="tooltiptext">Enter the discount percentage on the wholesale price.</span>
                        </span>
                    </label>
                    <input type="number" id="discount${productId}" step="0.01" value="0" oninput="calculatePOR(${productId})">
                </div>
                <div class="form-group">
                    <label for="pack${productId}">Pack Size
                        <span class="tooltip">ℹ️
                            <span class="tooltiptext">Enter the number of units in the pack.</span>
                        </span>
                    </label>
                    <input type="number" id="pack${productId}" step="1" oninput="calculatePOR(${productId})">
                </div>
                <div class="form-group">
                    <label>VAT Rate:
                        <span class="tooltip">ℹ️
                            <span class="tooltiptext">Select the VAT rate applicable to the product.</span>
                        </span>
                    </label>
                    <div class="toggle-group">
                        <button id="vatRate20${productId}" class="toggle-btn toggle-yes" onclick="toggleVAT(${productId}, '20')">20%</button>
                        <button id="vatRate0${productId}" class="toggle-btn toggle-no" onclick="toggleVAT(${productId}, '0')">0%</button>
                    </div>
                    <input type="hidden" id="vat${productId}" value="20">
                </div>
                <div class="form-group">
                    <label>Free Stock:
                        <span class="tooltip">ℹ️
                            <span class="tooltiptext">Indicate if the stock is provided for free.</span>
                        </span>
                    </label>
                    <div class="toggle-group">
                        <button id="freeStockYes${productId}" class="toggle-btn toggle-no" onclick="toggleFreeStock(${productId}, 'Yes')">Yes</button>
                        <button id="freeStockNo${productId}" class="toggle-btn toggle-yes" onclick="toggleFreeStock(${productId}, 'No')">No</button>
                    </div>
                    <input type="hidden" id="freeStock${productId}" value="No">
                </div>
                <div class="form-group">
                    <label for="notes${productId}">Notes:
                        <span class="tooltip">ℹ️
                            <span class="tooltiptext">Add any notes or comments about the product.</span>
                        </span>
                    </label>
                    <textarea id="notes${productId}" rows="3"></textarea>
                </div>
                <button class="clear-btn" onclick="clearProductCard(${productId})">Clear</button>
                <button class="copy-btn-bottom" onclick="copyProductCard(${productId})">Copy</button>
                <div class="summary" id="summary${productId}"></div>
            `;
            document.getElementById('productContainer').appendChild(card);

            // If data is provided (for loading from localStorage), set the input values
            if (data) {
                document.getElementById(`productName${productId}`).value = data.name;
                document.getElementById(`wholesale${productId}`).value = data.wholesale;
                document.getElementById(`rrp${productId}`).value = data.rrp;
                document.getElementById(`discount${productId}`).value = data.discount;
                document.getElementById(`pack${productId}`).value = data.packSize;
                document.getElementById(`vat${productId}`).value = data.vat;
                document.getElementById(`freeStock${productId}`).value = data.isFreeStock ? 'Yes' : 'No';
                document.getElementById(`notes${productId}`).value = data.notes || '';
                // Update toggle buttons
                toggleVAT(productId, data.vat);
                toggleFreeStock(productId, data.isFreeStock ? 'Yes' : 'No');
                calculatePOR(productId);
            }
        }

        function updateProductName(productId) {
            const nameInput = document.getElementById(`productName${productId}`);
            const product = productData.find(p => p.id === productId);
            product.name = nameInput.value || `Product ${productData.indexOf(product) + 1}`;
            updateSummaryTableName(productId, product.name);
            updateCharts();
            saveProductNames();
            saveData();
        }

        function saveProductNames() {
            productNamesList = [...new Set(productData.map(p => p.name).filter(name => name))];
            // Update datalist options
            const datalist = document.getElementById('productNames');
            datalist.innerHTML = productNamesList.map(name => `<option value="${name}">`).join('');
        }

        function removeProductCard(productId) {
            document.getElementById(`productCard${productId}`).remove();
            const row = document.getElementById(`row${productId}`);
            if (row) {
                row.remove();
            }
            // Remove product from productData
            productData = productData.filter(product => product.id !== productId);
            calculateTotalPOR();
            updateCharts();
            saveProductNames();
            saveData();
        }

        function copyProductCard(productId) {
            const originalProduct = productData.find(p => p.id === productId);
            if (originalProduct) {
                const data = {
                    name: originalProduct.name + ' Copy',
                    wholesale: document.getElementById(`wholesale${productId}`).value,
                    rrp: document.getElementById(`rrp${productId}`).value,
                    discount: document.getElementById(`discount${productId}`).value,
                    packSize: document.getElementById(`pack${productId}`).value,
                    vat: document.getElementById(`vat${productId}`).value,
                    isFreeStock: document.getElementById(`freeStock${productId}`).value === 'Yes',
                    notes: document.getElementById(`notes${productId}`).value
                };
                addProductCard(data);
            }
        }

        function toggleVAT(productId, rate) {
            document.getElementById(`vat${productId}`).value = rate;
            // Update the button styles
            document.getElementById(`vatRate20${productId}`).classList.toggle('toggle-yes', rate === '20');
            document.getElementById(`vatRate20${productId}`).classList.toggle('toggle-no', rate !== '20');
            document.getElementById(`vatRate0${productId}`).classList.toggle('toggle-yes', rate === '0');
            document.getElementById(`vatRate0${productId}`).classList.toggle('toggle-no', rate !== '0');
            calculatePOR(productId);
            saveData();
        }

        function toggleFreeStock(productId, choice) {
            document.getElementById(`freeStock${productId}`).value = choice;
            document.getElementById(`freeStockYes${productId}`).classList.toggle('toggle-yes', choice === 'Yes');
            document.getElementById(`freeStockYes${productId}`).classList.toggle('toggle-no', choice !== 'Yes');
            document.getElementById(`freeStockNo${productId}`).classList.toggle('toggle-yes', choice === 'No');
            document.getElementById(`freeStockNo${productId}`).classList.toggle('toggle-no', choice !== 'No');
            calculatePOR(productId);
            saveData();
        }

        function clearProductCard(productId) {
            document.getElementById(`wholesale${productId}`).value = '';
            document.getElementById(`rrp${productId}`).value = '';
            document.getElementById(`discount${productId}`).value = '0';
            document.getElementById(`pack${productId}`).value = '';
            document.getElementById(`productName${productId}`).value = '';
            document.getElementById(`notes${productId}`).value = '';

            // Reset VAT to '20%'
            toggleVAT(productId, '20');

            // Reset Free Stock to 'No'
            toggleFreeStock(productId, 'No');

            document.getElementById(`summary${productId}`).innerHTML = '';

            // Reset product data
            const product = productData.find(p => p.id === productId);
            if (product) {
                product.profit = 0;
                product.por = 0;
                product.revenue = 0;
                product.name = '';
            }

            // Remove summary table row
            const row = document.getElementById(`row${productId}`);
            if (row) {
                row.remove();
            }

            calculateTotalPOR();
            updateCharts();
            saveProductNames();
            saveData();
        }

        function calculatePOR(productId) {
            const wholesaleInput = document.getElementById(`wholesale${productId}`);
            const rrpInput = document.getElementById(`rrp${productId}`);
            const discountInput = document.getElementById(`discount${productId}`);
            const packSizeInput = document.getElementById(`pack${productId}`);
            const vatRate = parseFloat(document.getElementById(`vat${productId}`).value);

            const wholesale = parseFloat(wholesaleInput.value);
            const rrp = parseFloat(rrpInput.value);
            const discount = parseFloat(discountInput.value) || 0;
            const packSize = parseInt(packSizeInput.value);

            const isFreeStock = document.getElementById(`freeStock${productId}`).value === 'Yes';

            const product = productData.find(p => p.id === productId);

            // Input validation
            if ((!isFreeStock && (isNaN(wholesale) || wholesale <= 0)) || isNaN(rrp) || rrp <= 0 || isNaN(packSize) || packSize <= 0 || discount < 0 || discount >= 100) {
                document.getElementById(`summary${productId}`).innerHTML = '<p>Please enter valid positive numbers. Discount should be between 0 and 100.</p>';
                return;
            }

            // Adjust the wholesale and unit cost based on 'Free Stock'
            let discountedWholesale, unitCost;
            if (isFreeStock) {
                discountedWholesale = 0;
                unitCost = 0;
            } else {
                // Apply the discount to the wholesale price
                discountedWholesale = wholesale * (1 - discount / 100); // Wholesale after applying discount
                unitCost = discountedWholesale / packSize; // Cost price per unit after discount
            }

            const sellingPriceExVAT = rrp / (1 + vatRate / 100); // Selling price excluding VAT

            const profitPerItem = sellingPriceExVAT - unitCost;
            const totalProfit = profitPerItem * packSize;

            const por = (profitPerItem / sellingPriceExVAT) * 100;
            const totalRevenue = rrp * packSize; // Total revenue including VAT

            // Update the summary section
            document.getElementById(`summary${productId}`).innerHTML = `
                <p>Discounted Wholesale Price: £${discountedWholesale.toFixed(2)}</p>
                <p>Unit Cost: £${unitCost.toFixed(2)}</p>
                <p>Selling Price (ex VAT): £${sellingPriceExVAT.toFixed(2)}</p>
                <p>Profit per Item: £${profitPerItem.toFixed(2)}</p>
                <p>Total Profit: £${totalProfit.toFixed(2)}</p>
                <p>POR: ${por.toFixed(2)}%</p>
            `;

            product.profit = totalProfit;
            product.por = por;
            product.revenue = totalRevenue;
            product.packSize = packSize;
            product.sellingPriceExVAT = sellingPriceExVAT * packSize;

            // Update the table
            updateSummaryTable(productId, product.name || `Product ${productData.indexOf(product) + 1}`, isFreeStock ? 0 : wholesale, rrp, discount, packSize, totalRevenue, profitPerItem, totalProfit, por);

            // Recalculate totals and charts
            calculateTotalPOR();
            updateCharts();
            saveData();
        }

        function updateSummaryTable(productId, productName, wholesale, rrp, discount, packSize, totalRevenue, profitPerItem, totalProfit, por) {
            let row = document.getElementById(`row${productId}`);
            if (!row) {
                row = document.createElement('tr');
                row.id = `row${productId}`;
                document.getElementById('summaryBody').appendChild(row);
            }

            row.innerHTML = `
                <td>${productName}</td>
                <td>£${wholesale.toFixed(2)}</td>
                <td>£${rrp.toFixed(2)}</td>
                <td>${discount.toFixed(2)}%</td>
                <td>${packSize}</td>
                <td>${packSize}</td>
                <td>£${totalRevenue.toFixed(2)}</td>
                <td>£${profitPerItem.toFixed(2)}</td>
                <td>£${totalProfit.toFixed(2)}</td>
                <td>${por.toFixed(2)}%</td>
            `;
        }

        function updateSummaryTableName(productId, productName) {
            const row = document.getElementById(`row${productId}`);
            if (row) {
                row.cells[0].innerText = productName;
            }
        }

        function calculateTotalPOR() {
            let totalProfit = 0;
            let totalRevenue = 0;
            let totalUnits = 0;
            let totalSellingPriceExVAT = 0;

            productData.forEach(product => {
                const productId = product.id;
                const wholesale = parseFloat(document.getElementById(`wholesale${productId}`).value);
                const rrp = parseFloat(document.getElementById(`rrp${productId}`).value);
                const discount = parseFloat(document.getElementById(`discount${productId}`).value) || 0;
                const packSize = parseFloat(document.getElementById(`pack${productId}`).value);
                const vatRate = parseFloat(document.getElementById(`vat${productId}`).value);
                const isFreeStock = document.getElementById(`freeStock${productId}`).value === 'Yes';

                if (
                    (isFreeStock || (!isNaN(wholesale) && wholesale > 0)) &&
                    !isNaN(rrp) && rrp > 0 &&
                    !isNaN(packSize) && packSize > 0 &&
                    discount >= 0 && discount < 100
                ) {
                    let discountedWholesale, unitCost;
                    if (isFreeStock) {
                        discountedWholesale = 0;
                        unitCost = 0;
                    } else {
                        discountedWholesale = wholesale * (1 - discount / 100); // Apply discount to wholesale
                        unitCost = discountedWholesale / packSize;
                    }

                    const sellingPriceExVAT = rrp / (1 + vatRate / 100);
                    const profitPerItem = sellingPriceExVAT - unitCost;

                    totalProfit += profitPerItem * packSize;
                    totalRevenue += rrp * packSize;
                    totalUnits += packSize;
                    totalSellingPriceExVAT += sellingPriceExVAT * packSize;
                }
            });

            let totalPor = 0;
            if (totalSellingPriceExVAT > 0) {
                totalPor = (totalProfit / totalSellingPriceExVAT) * 100;
            } else {
                totalPor = 0;
            }

            document.getElementById('totalUnits').textContent = totalUnits;
            document.getElementById('totalProfit').textContent = `£${totalProfit.toFixed(2)}`;
            document.getElementById('averagePOR').textContent = `${totalPor.toFixed(2)}%`;
            document.getElementById('totalRevenue').textContent = `£${totalRevenue.toFixed(2)}`;
        }

        // Initialize chart variables
        let profitChart = null;
        let porChart = null;

        function updateCharts() {
            const filteredData = productData.filter(product => product.profit !== 0);
            if (filteredData.length === 0) {
                // If there's no data, destroy the charts and return
                if (profitChart) {
                    profitChart.destroy();
                    profitChart = null;
                }
                if (porChart) {
                    porChart.destroy();
                    porChart = null;
                }
                return;
            }

            const labels = filteredData.map(product => product.name || `Product ${productData.indexOf(product) + 1}`);
            const profits = filteredData.map(product => product.profit);
            const pors = filteredData.map(product => product.por);

            if (profitChart) {
                profitChart.data.labels = labels;
                profitChart.data.datasets[0].data = profits;
                profitChart.update();
            } else {
                const profitChartCtx = document.getElementById('profitChart').getContext('2d');
                profitChart = new Chart(profitChartCtx, {
                    type: 'bar',
                    data: {
                        labels: labels,
                        datasets: [{
                            label: 'Profit (£)',
                            data: profits,
                            backgroundColor: '#274358'
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: { y: { beginAtZero: true } },
                        plugins: {
                            legend: { display: false },
                            datalabels: {
                                color: '#000',
                                anchor: 'end',
                                align: 'top',
                                formatter: function(value) {
                                    return '£' + value.toFixed(2);
                                }
                            }
                        }
                    }
                });
            }

            if (porChart) {
                porChart.data.labels = labels;
                porChart.data.datasets[0].data = pors;
                porChart.update();
            } else {
                const porChartCtx = document.getElementById('porChart').getContext('2d');
                porChart = new Chart(porChartCtx, {
                    type: 'bar',
                    data: {
                        labels: labels,
                        datasets: [{
                            label: 'POR (%)',
                            data: pors,
                            backgroundColor: '#FF4E59'
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: { y: { beginAtZero: true, max: 100 } },
                        plugins: {
                            legend: { display: false },
                            datalabels: {
                                color: '#000',
                                anchor: 'end',
                                align: 'top',
                                formatter: function(value) {
                                    return value.toFixed(2) + '%';
                                }
                            }
                        }
                    }
                });
            }
        }

        function exportToCSV() {
            let csvContent = "\uFEFF"; // Add BOM to fix encoding issues
            csvContent += "Product,Wholesale (£),RRP (£),Discount (%),Pack Size,Total Revenue (£),Profit per Item (£),Total Profit (£),POR (%)\n";

            productData.forEach(product => {
                const productId = product.id;
                const name = product.name || `Product ${productData.indexOf(product) + 1}`;
                const wholesale = parseFloat(document.getElementById(`wholesale${productId}`).value) || 0;
                const rrp = parseFloat(document.getElementById(`rrp${productId}`).value) || 0;
                const discount = parseFloat(document.getElementById(`discount${productId}`).value) || 0;
                const packSize = parseFloat(document.getElementById(`pack${productId}`).value) || 0;
                const totalRevenue = product.revenue;
                const profitPerItem = product.profit / packSize;
                const totalProfit = product.profit;
                const por = product.por;

                if ((wholesale || document.getElementById(`freeStock${productId}`).value === 'Yes') && rrp && packSize) {
                    csvContent += `${name},£${wholesale.toFixed(2)},£${rrp.toFixed(2)},${discount.toFixed(2)}%,${packSize},£${totalRevenue.toFixed(2)},£${profitPerItem.toFixed(2)},£${totalProfit.toFixed(2)},${por.toFixed(2)}%\n`;
                }
            });

            // Download CSV with proper encoding
            const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
            const link = document.createElement("a");
            if (navigator.msSaveBlob) { // IE 10+
                navigator.msSaveBlob(blob, "por_summary.csv");
            } else {
                const url = URL.createObjectURL(blob);
                link.setAttribute("href", url);
                link.setAttribute("download", "por_summary.csv");
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
            }
        }

        function resetAll() {
            // Clear product data
            productData = [];
            uniqueIdCounter = 0;
            // Remove all product cards
            document.getElementById('productContainer').innerHTML = '';
            // Clear summary table
            document.getElementById('summaryBody').innerHTML = '';
            // Reset totals
            document.getElementById('totalUnits').textContent = '0';
            document.getElementById('totalRevenue').textContent = '£0.00';
            document.getElementById('totalProfit').textContent = '£0.00';
            document.getElementById('averagePOR').textContent = '0.00%';
            // Destroy charts
            if (profitChart) {
                profitChart.destroy();
                profitChart = null;
            }
            if (porChart) {
                porChart.destroy();
                porChart = null;
            }
            // Clear local storage
            localStorage.removeItem('porCalculatorData');
            // Reset product names list
            productNamesList = [];
        }

        function saveData() {
            const dataToSave = productData.map(product => {
                const productId = product.id;
                return {
                    id: productId,
                    name: product.name,
                    wholesale: document.getElementById(`wholesale${productId}`).value,
                    rrp: document.getElementById(`rrp${productId}`).value,
                    discount: document.getElementById(`discount${productId}`).value,
                    packSize: document.getElementById(`pack${productId}`).value,
                    vat: document.getElementById(`vat${productId}`).value,
                    isFreeStock: document.getElementById(`freeStock${productId}`).value === 'Yes',
                    notes: document.getElementById(`notes${productId}`).value
                };
            });
            localStorage.setItem('porCalculatorData', JSON.stringify(dataToSave));
        }

        function loadData() {
            const savedData = localStorage.getItem('porCalculatorData');
            if (savedData) {
                const products = JSON.parse(savedData);
                products.forEach(data => {
                    addProductCard(data);
                });
            } else {
                // Initialize with 3 product cards
                for (let i = 0; i < 3; i++) addProductCard();
            }
            saveProductNames();
        }

        function exportChart(chartId, filename) {
            const chartCanvas = document.getElementById(chartId);
            html2canvas(chartCanvas.parentNode).then(canvas => {
                const link = document.createElement('a');
                link.href = canvas.toDataURL();
                link.download = filename;
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
            });
        }

        function openComparisonModal() {
            const modal = document.getElementById('comparisonModal');
            const select1 = document.getElementById('compareProduct1');
            const select2 = document.getElementById('compareProduct2');

            // Clear previous options
            select1.innerHTML = '<option value="">--Select Product--</option>';
            select2.innerHTML = '<option value="">--Select Product--</option>';

            // Populate options
            productData.forEach(product => {
                const option = document.createElement('option');
                option.value = product.id;
                option.textContent = product.name || `Product ${productData.indexOf(product) + 1}`;
                select1.appendChild(option.cloneNode(true));
                select2.appendChild(option.cloneNode(true));
            });

            modal.style.display = 'block';

            // Add event listeners
            select1.onchange = updateComparisonTable;
            select2.onchange = updateComparisonTable;
        }

        function closeComparisonModal() {
            document.getElementById('comparisonModal').style.display = 'none';
            document.getElementById('comparisonBody').innerHTML = '';
        }

        function updateComparisonTable() {
            const select1 = document.getElementById('compareProduct1');
            const select2 = document.getElementById('compareProduct2');
            const productId1 = parseInt(select1.value);
            const productId2 = parseInt(select2.value);

            if (isNaN(productId1) || isNaN(productId2) || productId1 === productId2) {
                document.getElementById('comparisonBody').innerHTML = '<tr><td colspan="3">Please select two different products.</td></tr>';
                return;
            }

            const product1 = productData.find(p => p.id === productId1);
            const product2 = productData.find(p => p.id === productId2);

            const attributes = ['Wholesale (£)', 'RRP (£)', 'Discount (%)', 'Pack Size', 'Total Units', 'Total Revenue (£)', 'Profit per Item (£)', 'Total Profit (£)', 'POR (%)'];

            const values1 = [
                `£${parseFloat(document.getElementById(`wholesale${productId1}`).value || 0).toFixed(2)}`,
                `£${parseFloat(document.getElementById(`rrp${productId1}`).value).toFixed(2)}`,
                `${parseFloat(document.getElementById(`discount${productId1}`).value).toFixed(2)}%`,
                document.getElementById(`pack${productId1}`).value,
                product1.packSize,
                `£${product1.revenue.toFixed(2)}`,
                `£${(product1.profit / product1.packSize).toFixed(2)}`,
                `£${product1.profit.toFixed(2)}`,
                `${product1.por.toFixed(2)}%`
            ];

            const values2 = [
                `£${parseFloat(document.getElementById(`wholesale${productId2}`).value || 0).toFixed(2)}`,
                `£${parseFloat(document.getElementById(`rrp${productId2}`).value).toFixed(2)}`,
                `${parseFloat(document.getElementById(`discount${productId2}`).value).toFixed(2)}%`,
                document.getElementById(`pack${productId2}`).value,
                product2.packSize,
                `£${product2.revenue.toFixed(2)}`,
                `£${(product2.profit / product2.packSize).toFixed(2)}`,
                `£${product2.profit.toFixed(2)}`,
                `${product2.por.toFixed(2)}%`
            ];

            let comparisonHTML = '';
            for (let i = 0; i < attributes.length; i++) {
                comparisonHTML += `
                    <tr>
                        <td>${attributes[i]}</td>
                        <td>${values1[i]}</td>
                        <td>${values2[i]}</td>
                    </tr>
                `;
            }

            document.getElementById('comparisonBody').innerHTML = comparisonHTML;
        }

        // Close modal when clicking outside content
        window.onclick = function(event) {
            const modal = document.getElementById('comparisonModal');
            if (event.target == modal) {
                closeComparisonModal();
            }
        }

        // Load data on page load
        window.onload = loadData;
    </script>

</body>
</html>
