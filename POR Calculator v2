<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Consort POR Calculator</title>
    <style>
        /* [Your existing styles remain unchanged] */
        body {
            font-family: Arial, sans-serif;
            background-color: #f8f9fa;
            color: #333;
            margin: 0;
            padding: 20px;
        }

        .header {
            background-color: #274358;
            color: white;
            text-align: center;
            padding: 15px;
            font-size: 1.5em;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

        .container {
            display: flex;
            flex-wrap: wrap;
            gap: 20px;
            justify-content: center;
            margin-top: 20px;
        }

        .card {
            width: 280px;
            padding: 20px;
            background-color: #ffffff;
            border-radius: 10px;
            box-shadow: 0 6px 14px rgba(0, 0, 0, 0.15);
            position: relative;
            transition: transform 0.3s ease;
        }

        .card:hover {
            transform: translateY(-5px);
        }

        .card h3 {
            text-align: center;
            color: #274358;
            margin-top: 0;
        }

        .form-group {
            margin-bottom: 15px;
        }

        .form-group label {
            font-weight: bold;
            display: block;
            margin-bottom: 5px;
        }

        .form-group input,
        .form-group select {
            width: 100%;
            padding: 8px;
            border-radius: 5px;
            border: 1px solid #ddd;
        }

        .btn {
            padding: 10px;
            background-color: #FF4E59;
            color: #fff;
            border: none;
            border-radius: 5px;
            font-size: 14px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

        .btn:hover {
            background-color: #cc3e47;
        }

        .clear-btn,
        .remove-btn {
            font-size: 14px;
            padding: 8px;
            border-radius: 5px;
            cursor: pointer;
            margin-top: 10px;
        }

        .clear-btn {
            background-color: #617B8F;
            color: white;
            width: 100%;
        }

        .remove-btn {
            background-color: #FF4E59;
            color: white;
            border: none;
            position: absolute;
            top: 10px;
            right: 10px;
        }

        .toggle-group {
            display: flex;
            justify-content: space-around;
            margin-top: 10px;
        }

        .toggle-btn {
            width: 45%;
            padding: 10px;
            color: #fff;
            border: none;
            border-radius: 5px;
            font-size: 14px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

        .toggle-yes {
            background-color: #4CAF50; /* Green for 'Yes' */
        }

        .toggle-no {
            background-color: #FF4E59; /* Red for 'No' */
        }

        .summary-table {
            width: 90%;
            margin: 20px auto;
            border-collapse: collapse;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

        .summary-table th,
        .summary-table td {
            border: 1px solid #ddd;
            padding: 10px;
            text-align: center;
        }

        .summary-table th {
            background-color: #274358;
            color: #ffffff;
        }

        .summary-table tfoot td {
            font-weight: bold;
            background-color: #A6D9D7;
        }

        .chart-container {
            width: 90%;
            margin: 20px auto;
            display: flex;
            flex-wrap: wrap;
            gap: 20px;
            justify-content: center;
        }

        .chart-card {
            background-color: #ffffff;
            border-radius: 10px;
            box-shadow: 0 6px 14px rgba(0, 0, 0, 0.1);
            padding: 20px;
            width: 45%;
        }

        canvas {
            width: 100% !important;
            height: auto !important;
        }

        /* Ensure the charts are responsive on smaller screens */
        @media (max-width: 768px) {
            .chart-card {
                width: 100%;
            }
        }
    </style>
</head>

<body>

    <div class="header">
        Consort POR Calculator
    </div>

    <button class="btn add-product-btn" style="margin-top: 20px; display: block; margin-left: auto; margin-right: auto;" onclick="addProductCard()">Add Product</button>

    <div class="container" id="productContainer"></div>

    <table class="summary-table" id="summaryTable">
        <thead>
            <tr>
                <th>Product</th>
                <th>Wholesale (£)</th>
                <th>RRP (£)</th>
                <th>Pack Size</th>
                <th>Profit per Item (£)</th>
                <th>Total Profit (£)</th>
                <th>POR (%)</th>
            </tr>
        </thead>
        <tbody id="summaryBody"></tbody>
        <tfoot>
            <tr>
                <td colspan="5">Totals:</td>
                <td id="totalProfit">£0.00</td>
                <td id="averagePOR">0.00%</td>
            </tr>
        </tfoot>
    </table>

    <div class="chart-container">
        <div class="chart-card">
            <h3>Profit by Product</h3>
            <canvas id="profitChart"></canvas>
        </div>
        <div class="chart-card">
            <h3>POR by Product</h3>
            <canvas id="porChart"></canvas>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        let uniqueIdCounter = 0; // Unique ID for each product card
        let productData = []; // Array to store product data

        function addProductCard() {
            const productId = uniqueIdCounter++;
            const product = {
                id: productId,
                name: '', // Will set later
                profit: 0,
                por: 0
            };
            productData.push(product);

            const card = document.createElement('div');
            card.className = 'card';
            card.id = `productCard${productId}`;
            card.innerHTML = `
                <h3 id="productTitle${productId}">Product </h3>
                <button class="remove-btn" onclick="removeProductCard(${productId})">X</button>
                <div class="form-group">
                    <label for="wholesale${productId}">Wholesale Price (£)</label>
                    <input type="number" id="wholesale${productId}" step="0.01" value="" oninput="calculatePOR(${productId})">
                </div>
                <div class="form-group">
                    <label for="rrp${productId}">RRP (£)</label>
                    <input type="number" id="rrp${productId}" step="0.01" value="" oninput="calculatePOR(${productId})">
                </div>
                <div class="form-group">
                    <label for="pack${productId}">Pack Size</label>
                    <input type="number" id="pack${productId}" step="1" value="" oninput="calculatePOR(${productId})">
                </div>
                <div class="form-group">
                    <label>VAT Rate:</label>
                    <div class="toggle-group">
                        <button id="vatRate20${productId}" class="toggle-btn toggle-yes" onclick="toggleVAT(${productId}, '20')">20%</button>
                        <button id="vatRate0${productId}" class="toggle-btn toggle-no" onclick="toggleVAT(${productId}, '0')">0%</button>
                    </div>
                    <input type="hidden" id="vat${productId}" value="20">
                </div>
                <div class="form-group">
                    <label>Free Stock:</label>
                    <div class="toggle-group">
                        <button id="freeStockYes${productId}" class="toggle-btn toggle-no" onclick="toggleFreeStock(${productId}, 'Yes')">Yes</button>
                        <button id="freeStockNo${productId}" class="toggle-btn toggle-yes" onclick="toggleFreeStock(${productId}, 'No')">No</button>
                    </div>
                    <input type="hidden" id="freeStock${productId}" value="No">
                </div>
                <button class="clear-btn" onclick="clearProductCard(${productId})">Clear</button>
                <div class="summary" id="summary${productId}"></div>
            `;
            document.getElementById('productContainer').appendChild(card);
            updateProductTitles();
        }

        function removeProductCard(productId) {
            document.getElementById(`productCard${productId}`).remove();
            const row = document.getElementById(`row${productId}`);
            if (row) {
                row.remove();
            }
            // Remove product from productData
            productData = productData.filter(product => product.id !== productId);
            updateProductTitles();
            calculateTotalPOR();
            updateCharts();
        }

        function updateProductTitles() {
            productData.forEach((product, index) => {
                product.name = `Product ${index + 1}`;
                const productId = product.id;
                const titleElement = document.getElementById(`productTitle${productId}`);
                if (titleElement) {
                    titleElement.innerText = product.name;
                }
                // Update the row in the summary table if exists
                const row = document.getElementById(`row${productId}`);
                if (row) {
                    row.cells[0].innerText = product.name;
                }
            });
        }

        function toggleVAT(productId, rate) {
            document.getElementById(`vat${productId}`).value = rate;
            // Update the button styles
            document.getElementById(`vatRate20${productId}`).classList.toggle('toggle-yes', rate === '20');
            document.getElementById(`vatRate20${productId}`).classList.toggle('toggle-no', rate !== '20');
            document.getElementById(`vatRate0${productId}`).classList.toggle('toggle-yes', rate === '0');
            document.getElementById(`vatRate0${productId}`).classList.toggle('toggle-no', rate !== '0');
            calculatePOR(productId);
        }

        function toggleFreeStock(productId, choice) {
            document.getElementById(`freeStock${productId}`).value = choice;
            document.getElementById(`freeStockYes${productId}`).classList.toggle('toggle-yes', choice === 'Yes');
            document.getElementById(`freeStockYes${productId}`).classList.toggle('toggle-no', choice !== 'Yes');
            document.getElementById(`freeStockNo${productId}`).classList.toggle('toggle-no', choice === 'Yes');
            document.getElementById(`freeStockNo${productId}`).classList.toggle('toggle-yes', choice !== 'Yes');
            calculatePOR(productId);
        }

        function clearProductCard(productId) {
            document.getElementById(`wholesale${productId}`).value = '';
            document.getElementById(`rrp${productId}`).value = '';
            document.getElementById(`pack${productId}`).value = '';

            // Reset VAT to '20%'
            document.getElementById(`vat${productId}`).value = '20';
            document.getElementById(`vatRate20${productId}`).classList.add('toggle-yes');
            document.getElementById(`vatRate20${productId}`).classList.remove('toggle-no');
            document.getElementById(`vatRate0${productId}`).classList.add('toggle-no');
            document.getElementById(`vatRate0${productId}`).classList.remove('toggle-yes');

            // Reset Free Stock to 'No'
            document.getElementById(`freeStock${productId}`).value = 'No';
            document.getElementById(`freeStockYes${productId}`).classList.remove('toggle-yes');
            document.getElementById(`freeStockYes${productId}`).classList.add('toggle-no');
            document.getElementById(`freeStockNo${productId}`).classList.remove('toggle-no');
            document.getElementById(`freeStockNo${productId}`).classList.add('toggle-yes');

            document.getElementById(`summary${productId}`).innerHTML = '';

            // Reset product data
            const product = productData.find(p => p.id === productId);
            if (product) {
                product.profit = 0;
                product.por = 0;
            }

            // Remove summary table row
            const row = document.getElementById(`row${productId}`);
            if (row) {
                row.remove();
            }

            calculateTotalPOR();
            updateCharts();
        }

        function calculatePOR(productId) {
            const wholesale = parseFloat(document.getElementById(`wholesale${productId}`).value) || 0;
            const rrp = parseFloat(document.getElementById(`rrp${productId}`).value) || 0;
            const packSize = parseFloat(document.getElementById(`pack${productId}`).value) || 0;
            const vat = parseFloat(document.getElementById(`vat${productId}`).value) || 0;
            const isFreeStock = document.getElementById(`freeStock${productId}`).value === 'Yes';

            const product = productData.find(p => p.id === productId);

            if (wholesale > 0 && rrp > 0 && packSize > 0) {
                const unitCost = wholesale / packSize;
                const unitCostWithVAT = unitCost * (1 + vat / 100);
                const profitPerItem = isFreeStock ? rrp : rrp - unitCostWithVAT;
                const totalProfit = profitPerItem * packSize;
                const por = isFreeStock ? 100 : (profitPerItem / rrp) * 100;

                document.getElementById(`summary${productId}`).innerHTML = `
                    <p>Profit per Item: £${profitPerItem.toFixed(2)}</p>
                    <p>Total Profit: £${totalProfit.toFixed(2)}</p>
                    <p>POR: ${por.toFixed(2)}%</p>
                `;

                product.profit = totalProfit;
                product.por = por;

                updateSummaryTable(productId, product.name, wholesale, rrp, packSize, profitPerItem, totalProfit, por);
            } else {
                document.getElementById(`summary${productId}`).innerHTML = '<p>Please enter valid values</p>';
                product.profit = 0;
                product.por = 0;
                const row = document.getElementById(`row${productId}`);
                if (row) {
                    row.remove();
                }
            }

            calculateTotalPOR();
            updateCharts();
        }

        function updateSummaryTable(productId, productName, wholesale, rrp, packSize, profitPerItem, totalProfit, por) {
            let row = document.getElementById(`row${productId}`);
            if (!row) {
                row = document.createElement('tr');
                row.id = `row${productId}`;
                document.getElementById('summaryBody').appendChild(row);
            }
            row.innerHTML = `
                <td>${productName}</td>
                <td>£${wholesale.toFixed(2)}</td>
                <td>£${rrp.toFixed(2)}</td>
                <td>${packSize}</td>
                <td>£${profitPerItem.toFixed(2)}</td>
                <td>£${totalProfit.toFixed(2)}</td>
                <td>${por.toFixed(2)}%</td>
            `;
        }

        function calculateTotalPOR() {
            let totalProfit = 0;
            let totalCost = 0;

            productData.forEach(product => {
                const productId = product.id;
                const wholesale = parseFloat(document.getElementById(`wholesale${productId}`).value) || 0;
                const rrp = parseFloat(document.getElementById(`rrp${productId}`).value) || 0;
                const packSize = parseFloat(document.getElementById(`pack${productId}`).value) || 0;
                const vat = parseFloat(document.getElementById(`vat${productId}`).value) || 0;
                const isFreeStock = document.getElementById(`freeStock${productId}`).value === 'Yes';

                if (wholesale && rrp && packSize) {
                    const unitCost = wholesale / packSize;
                    const unitCostWithVAT = unitCost * (1 + vat / 100);
                    if (!isFreeStock) {
                        totalCost += unitCostWithVAT * packSize;
                    }
                    totalProfit += isFreeStock ? rrp * packSize : (rrp - unitCostWithVAT) * packSize;
                }
            });

            let totalPor = 0;
            if (totalCost > 0) {
                totalPor = (totalProfit / totalCost) * 100;
            } else if (totalProfit > 0) {
                totalPor = 100;
            } else {
                totalPor = 0;
            }

            document.getElementById('totalProfit').textContent = `£${totalProfit.toFixed(2)}`;
            document.getElementById('averagePOR').textContent = `${totalPor.toFixed(2)}%`;
        }

        // Initialize chart variables
        let profitChart = null;
        let porChart = null;

        function updateCharts() {
            const filteredData = productData.filter(product => product.profit !== 0);
            if (filteredData.length === 0) {
                // If there's no data, destroy the charts and return
                if (profitChart) {
                    profitChart.destroy();
                    profitChart = null;
                }
                if (porChart) {
                    porChart.destroy();
                    porChart = null;
                }
                return;
            }

            const labels = filteredData.map(product => product.name);
            const profits = filteredData.map(product => product.profit);
            const pors = filteredData.map(product => product.por);

            if (profitChart) {
                profitChart.data.labels = labels;
                profitChart.data.datasets[0].data = profits;
                profitChart.update();
            } else {
                const profitChartCtx = document.getElementById('profitChart').getContext('2d');
                profitChart = new Chart(profitChartCtx, {
                    type: 'bar',
                    data: {
                        labels: labels,
                        datasets: [{
                            label: 'Profit (£)',
                            data: profits,
                            backgroundColor: '#274358'
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: { y: { beginAtZero: true } },
                        plugins: {
                            legend: { display: false }
                        }
                    }
                });
            }

            if (porChart) {
                porChart.data.labels = labels;
                porChart.data.datasets[0].data = pors;
                porChart.update();
            } else {
                const porChartCtx = document.getElementById('porChart').getContext('2d');
                porChart = new Chart(porChartCtx, {
                    type: 'bar',
                    data: {
                        labels: labels,
                        datasets: [{
                            label: 'POR (%)',
                            data: pors,
                            backgroundColor: '#FF4E59'
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: { y: { beginAtZero: true } },
                        plugins: {
                            legend: { display: false }
                        }
                    }
                });
            }
        }

        // Initialize with 3 product cards
        for (let i = 0; i < 3; i++) addProductCard();
    </script>

</body>

</html>
